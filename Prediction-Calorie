{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91716,"databundleVersionId":11893428,"sourceType":"competition"}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:58:13.641617Z","iopub.execute_input":"2025-05-07T18:58:13.641954Z","iopub.status.idle":"2025-05-07T18:58:14.023968Z","shell.execute_reply.started":"2025-05-07T18:58:13.641928Z","shell.execute_reply":"2025-05-07T18:58:14.022923Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e5/sample_submission.csv\n/kaggle/input/playground-series-s5e5/train.csv\n/kaggle/input/playground-series-s5e5/test.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/playground-series-s5e5/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/playground-series-s5e5/test.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:58:15.684155Z","iopub.execute_input":"2025-05-07T18:58:15.684598Z","iopub.status.idle":"2025-05-07T18:58:16.988040Z","shell.execute_reply.started":"2025-05-07T18:58:15.684569Z","shell.execute_reply":"2025-05-07T18:58:16.986727Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:58:19.138517Z","iopub.execute_input":"2025-05-07T18:58:19.138869Z","iopub.status.idle":"2025-05-07T18:58:19.244589Z","shell.execute_reply.started":"2025-05-07T18:58:19.138841Z","shell.execute_reply":"2025-05-07T18:58:19.243299Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 750000 entries, 0 to 749999\nData columns (total 9 columns):\n #   Column      Non-Null Count   Dtype  \n---  ------      --------------   -----  \n 0   id          750000 non-null  int64  \n 1   Sex         750000 non-null  object \n 2   Age         750000 non-null  int64  \n 3   Height      750000 non-null  float64\n 4   Weight      750000 non-null  float64\n 5   Duration    750000 non-null  float64\n 6   Heart_Rate  750000 non-null  float64\n 7   Body_Temp   750000 non-null  float64\n 8   Calories    750000 non-null  float64\ndtypes: float64(6), int64(2), object(1)\nmemory usage: 51.5+ MB\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"test.isna().head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:59:13.926128Z","iopub.execute_input":"2025-05-07T18:59:13.926502Z","iopub.status.idle":"2025-05-07T18:59:13.954972Z","shell.execute_reply.started":"2025-05-07T18:59:13.926480Z","shell.execute_reply":"2025-05-07T18:59:13.953952Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"      id    Sex    Age  Height  Weight  Duration  Heart_Rate  Body_Temp\n0  False  False  False   False   False     False       False      False\n1  False  False  False   False   False     False       False      False\n2  False  False  False   False   False     False       False      False\n3  False  False  False   False   False     False       False      False\n4  False  False  False   False   False     False       False      False","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Height</th>\n      <th>Weight</th>\n      <th>Duration</th>\n      <th>Heart_Rate</th>\n      <th>Body_Temp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"train.isna().describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T18:59:41.149522Z","iopub.execute_input":"2025-05-07T18:59:41.149850Z","iopub.status.idle":"2025-05-07T18:59:41.278819Z","shell.execute_reply.started":"2025-05-07T18:59:41.149826Z","shell.execute_reply":"2025-05-07T18:59:41.277966Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"            id     Sex     Age  Height  Weight Duration Heart_Rate Body_Temp  \\\ncount   750000  750000  750000  750000  750000   750000     750000    750000   \nunique       1       1       1       1       1        1          1         1   \ntop      False   False   False   False   False    False      False     False   \nfreq    750000  750000  750000  750000  750000   750000     750000    750000   \n\n       Calories  \ncount    750000  \nunique        1  \ntop       False  \nfreq     750000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Height</th>\n      <th>Weight</th>\n      <th>Duration</th>\n      <th>Heart_Rate</th>\n      <th>Body_Temp</th>\n      <th>Calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n      <td>750000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"# Data analysis","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}